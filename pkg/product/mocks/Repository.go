// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import product "github.com/pangminfu/go-clean-arch/pkg/product"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: p
func (_m *Repository) Add(p product.Product) (product.Product, error) {
	ret := _m.Called(p)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(product.Product) product.Product); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Product) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Products provides a mock function with given fields:
func (_m *Repository) Products() ([]product.Product, error) {
	ret := _m.Called()

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func() []product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: code
func (_m *Repository) Search(code string) (product.Product, error) {
	ret := _m.Called(code)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(string) product.Product); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: p
func (_m *Repository) Update(p product.Product) (product.Product, error) {
	ret := _m.Called(p)

	var r0 product.Product
	if rf, ok := ret.Get(0).(func(product.Product) product.Product); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Product) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
